os.loadAPI("Logger");

-- reference position
local x0 = 0;
local y0 = 0;
local z0 = 0;
-- obvious name
local slot_fuel = 16;
local block_fall_time = 0.2;

function setRefPosition(x0_ref,y0_ref,z0_ref)
    x0 = x0_ref or x0;
    y0 = y0_ref or y0;
    z0 = z0_ref or z0;
end
function setFuelSlot(fs)
    slot_fuel = fs or slot_fuel;
end

-- tracking by integration
Orientation = {
    ["forward"] = 0;
    ["right"]   = 1;
    ["backward"]= 2;
    ["left"]    = 3;
}
local num2ori = {"forward","right","backward","left"};
local x = x0;
local y = y0;
local z = z0;
local orientation = Orientation.right;

-- output functions
function getX()
    return x;
end
function getY()
    return y;
end
function getZ()
    return z;
end
function getOrientation()
    return num2ori[orientation+1];
end

-- refuel function
function refuel(amount)
    if turtle.getFuelLevel()<5 then
        turtle.select(slot_fuel)
        turtle.refuel(amount)
    end
end

-- motion + tracking functions
-- digging
function digto(xx,yy,zz)
    zz = zz or z;
    Logger.logdebug("digto(" .. xx .. "," .. yy .. "," .. zz .. ")");
    return (digx(xx-x) and digy(yy-y) and digz(zz-z))
end
function digx(dist)
    if (dist>0) then
        return (face(Orientation.right) and digforward(dist))
    elseif (dist<0) then
        return (face(Orientation.left) and digforward(-dist))
    else
        return true
    end
end
function digy(dist)
    if (dist>0) then
        return (face(Orientation.forward) and digforward(dist))
    elseif (dist<0) then
        return (face(Orientation.backward) and digforward(-dist))
    else
        return true
    end
end
function digz(dist)
    local num_attempts = 0
    if (dist>0) then
        for ii=1,dist do
            num_attempts = 0
            refuel(1)
            while not turtle.up() do
                if (turtle.detectUp()) then
                    turtle.digUp()
                else
                    num_attempts = num_attempts + 1
                    if (num_attempts>20) then
                        Logger.logerror("I'm stuck while digging up")
                        return false
                    end
                end
                sleep(block_fall_time)
            end
            z=z+1
        end
    elseif (dist<0) then
        for ii=1,-dist do
            num_attempts = 0
            refuel(1)
            while not turtle.down() do
                if (turtle.detectDown()) then
                    turtle.digDown()
                else
                    num_attempts = num_attempts + 1
                    if (num_attempts>20) then
                        Logger.logerror("I'm stuck while digging down")
                        return false
                    end
                end
                sleep(block_fall_time)
            end
            z=z-1
        end
    end
    return true
end

-- moving (no digging/destroying blocks)
function moveto(xx,yy,zz)
    if (zz==nil) then
        zz=z
    end
    Logger.logdebug("moveto(" .. xx .. "," .. yy .. "," .. zz .. ")");
    return (movex(xx-x) and movey(yy-y) and movez(zz-z))
end
function movex(dist)
    if (dist>0) then
        return (face(Orientation.right) and moveforward(dist))
    elseif (dist<0) then
        return (face(Orientation.left) and moveforward(-dist))
    else
        return true
    end
end
function movey(dist)
    if (dist>0) then
        return (face(Orientation.forward) and moveforward(dist))
    elseif (dist<0) then
        return (face(Orientation.backward) and moveforward(-dist))
    else
        return true
    end
end
function movez(dist)
 local num_attempts = 0
    if (dist>0) then
        for ii=1,dist do
            num_attempts = 0
            refuel(1)
            while not turtle.up() do
                num_attempts = num_attempts + 1
                if (num_attempts>20) then
                    Logger.logerror("I'm stuck while moving up")
                    return false
                end
                sleep(block_fall_time)
            end
            z=z+1
        end
    elseif (dist<0) then
        for ii=1,-dist do
            num_attempts = 0
            refuel(1)
            while not turtle.down() do
                num_attempts = num_attempts + 1
                if (num_attempts>20) then
                    Logger.logerror("I'm stuck while moving down")
                    return false
                end
                sleep(block_fall_time)
            end
            z=z-1
        end
    end
    return true
end
-- turning
function face(desired_orientation)
    local num_turns = (desired_orientation-orientation)%4
    Logger.logdebug("facing " .. num2ori[desired_orientation+1]);
    
    if (num_turns==0) then
        return true
    elseif (num_turns<=2) then
        return turnright(num_turns)
    else
        return turnleft(1)
    end
end
--actually moving
function digforward(dist)
    local num_attempts = 0
    for ii=1,dist do
        num_attempts = 0
        refuel(1)
        while not turtle.forward() do
            if (turtle.detect()) then
                turtle.dig()
            else
                num_attempts = num_attempts + 1
                if (num_attempts>20) then
                    Logger.logerror("I'm stuck while digging forward")
                    return false
                end
            end
            sleep(block_fall_time)
        end
        adddist(1)
    end
    return true
end
function moveforward(dist)
    local num_attempts = 0
    for ii=1,dist do
        num_attempts = 0
        refuel(1)
        while not turtle.forward() do
            num_attempts = num_attempts + 1
            if (num_attempts>20) then
                Logger.logerror("I'm stuck while moving forward")
                return false
            end
            sleep(block_fall_time)
        end
        adddist(1)
    end
    return true
end
function adddist(dist)
    if (orientation==Orientation.forward) then
        y = y + 1
    elseif (orientation==Orientation.right) then
        x = x + 1
    elseif (orientation==Orientation.backward) then
        y = y - 1
    elseif (orientation==Orientation.left) then
        x = x - 1
    else
        Logger.logwarning("Orientation = " .. orientation .. " ; This orientation is impossible :/")
    end 
end
function turnleft(numturns)
    for ii=1,(numturns%4) do
        if not turtle.turnLeft() then
            return false
        else
            orientation = (orientation - 1)%4
        end
    end
    return true
end
function turnright(numturns)
    for ii=1,(numturns%4) do
        if not turtle.turnRight() then
            return false
        else
            orientation = (orientation + 1)%4
        end
    end
    return true
end